# -*- coding: utf-8 -*-
"""final-ic-II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12zY5q0rQgxkCxQ63m6fLrYAUi-gcwyV-

# Importar las librerías
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
from sklearn.metrics import (
    confusion_matrix, accuracy_score, precision_score, recall_score)

"""# Importar datos """

train = pd.read_csv('/content/drive/MyDrive/datasetshopping.csv')
train.head(4)

print(train.keys())

print(train.describe())

"""# Estudio de datos de forma gráfica"""

pd.crosstab(train.Month, train.Revenue).plot(kind='bar')
plt.title('Months and Revenue')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.savefig('month_revenue')

"""# Nomalización de datos"""

print(set(train.Month))

months = {'Nov': 11, 'Sep': 9, 'Feb': 2, 'Jul': 7, 'Oct': 10, 'Dec': 12, 'Aug': 8, 'June': 6, 'Mar': 3, 'May': 5}
train.Month = train.Month.map(months)

print(set(train.Month))

print(set(train.VisitorType))

visitors = {'New_Visitor': 0, 'Returning_Visitor': 1, 'Other': 0}
train.VisitorType = train.VisitorType.map(visitors)

print(set(train.VisitorType))

"""# Datos de entrenamiento y prueba"""

X = train.drop(columns=['Revenue'])
y = train.Revenue

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)

print(X_train)

"""# Escalar los datos"""

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print(X_train)

"""# Entrenar el modelo"""

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(y_pred)

"""# Predecir el modelo"""

matrix = confusion_matrix(y_test, y_pred)

print('Matriz de Confusión:')
print(matrix)

precision = precision_score(y_test, y_pred)

print('Precisión del modelo:')
print(precision)

accuracy = accuracy_score(y_test, y_pred)

print('Exactitud del modelo:')
print(accuracy)